// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace TrafficClaimIntegratorAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClaimTrafficCorrelation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CorrelationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("MatchScore")
                        .HasColumnType("real");

                    b.Property<Guid>("TrafficEventId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("TrafficEventId");

                    b.ToTable("ClaimTrafficCorrelations");
                });

            modelBuilder.Entity("InsuranceClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IncidentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IntersectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InsuranceClaims");
                });

            modelBuilder.Entity("TrafficEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IntersectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RawData")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TrafficEvents");
                });

            modelBuilder.Entity("ClaimTrafficCorrelation", b =>
                {
                    b.HasOne("InsuranceClaim", "Claim")
                        .WithMany("Correlations")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrafficEvent", "TrafficEvent")
                        .WithMany("Correlations")
                        .HasForeignKey("TrafficEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("TrafficEvent");
                });

            modelBuilder.Entity("InsuranceClaim", b =>
                {
                    b.Navigation("Correlations");
                });

            modelBuilder.Entity("TrafficEvent", b =>
                {
                    b.Navigation("Correlations");
                });
#pragma warning restore 612, 618
        }
    }
}
